<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>@ViewBag.Title - Dashboard</title>
    <meta name="description" content="@ViewBag.MetaDescription" />
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="~/css/costum.css" asp-append-version="true" />
</head>
<body class="font-poppins text-gray-800 text-base lg:text-[15px] flex flex-col lg:flex-row min-h-screen bg-gray-100">
    @using Microsoft.Extensions.Options
    @using MyAuthDemo.Models
    @inject IOptions<MyAuthDemo.Models.FirebaseOptions> FirebaseOptions
    @{
        var firebase = FirebaseOptions.Value;
    }
    <!-- Toast Messages -->
    @if (TempData["Success"] != null)
    {
        <div id="toast-success" class="fixed top-6 right-6 z-50 flex items-start gap-4 bg-green-100 border border-green-400 text-green-800 px-4 py-3 rounded shadow transition-opacity duration-300">
            <div class="flex-1">@TempData["Success"]</div>
            <button type="button" class="text-green-800 hover:text-green-600" onclick="closeToast('toast-success')">&times;</button>
        </div>
    }

    @if (TempData["Error"] != null)
    {
        <div id="toast-error" class="fixed top-6 right-6 z-50 flex items-start gap-4 bg-red-100 border border-red-400 text-red-800 px-4 py-3 rounded shadow transition-opacity duration-300">
            <div class="flex-1">@TempData["Error"]</div>
            <button type="button" class="text-red-800 hover:text-red-600" onclick="closeToast('toast-error')">&times;</button>
        </div>
    }

    <!-- Sidebar (left) -->
    @await Html.PartialAsync("_Sidebar")

    <!-- Main content -->
    <div class="flex-1 flex flex-col lg:ml-64 min-h-screen">
        @await Html.PartialAsync("_Header")

        <main class="flex-1 overflow-y-auto px-4 sm:px-6 lg:px-10 py-6 bg-gray-50 mt-20 md:mt-14 lg:mt-0 mb-8">
            @RenderBody()
        </main>

        @await Html.PartialAsync("_Footer")
    </div>

    <!-- JS -->
    <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <script>
        function closeToast(id) {
            const el = document.getElementById(id);
            if (el) {
                el.style.display = 'none';
            }
        }

        $(document).ready(function () {
            // Auto fade out after 4 seconds
            setTimeout(function () {
                $('#toast-success').fadeOut('slow');
                $('#toast-error').fadeOut('slow');
            }, 4000);
        });
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        poppins: ['Poppins', 'sans-serif'],
                    }
                }
            }
        }
    </script>

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-app.js";
        import { getMessaging, getToken } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-messaging.js";

        @* const firebaseConfig = {
            apiKey: "YOUR_API_KEY",
            authDomain: "YOUR_PROJECT.firebaseapp.com",
            projectId: "YOUR_PROJECT_ID",
            storageBucket: "YOUR_PROJECT.appspot.com",
            messagingSenderId: "YOUR_SENDER_ID",
            appId: "YOUR_APP_ID"
        }; *@

        const firebaseConfig = {
            apiKey: "@firebase.ApiKey",
            authDomain: "@firebase.AuthDomain",
            projectId: "@firebase.ProjectId",
            storageBucket: "@firebase.StorageBucket",
            messagingSenderId: "@firebase.MessagingSenderId",
            appId: "@firebase.AppId",
            measurementId: "@firebase.MeasurementId"
        };

        

        const app = initializeApp(firebaseConfig);
        const messaging = getMessaging(app);

        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('/firebase-messaging-sw.js')
            .then((registration) => {
                console.log('Service Worker registered with scope:', registration.scope);

                Notification.requestPermission().then((permission) => {
                    console.log('Notification permission:', permission);
                    if (permission === 'granted') {
                        navigator.serviceWorker.ready.then((registration) => {
                            getToken(messaging, {
                                vapidKey: 'BGlzz63jBQpw3wS30vi3CXG6z83zuUuNkdADIungPnk8ONiO0hci1mlXslvydqRH8LAWATb6-r55wCY_V3y7Wf0',
                                serviceWorkerRegistration: registration // ⬅️ wajib agar token sukses
                            }).then((currentToken) => {
                                if (currentToken) {
                                    console.log('FCM Token:', currentToken);
                                    fetch('/Notification/SaveFcmToken', {
                                        method: 'POST',
                                        headers: { 'Content-Type': 'application/json' },
                                        body: JSON.stringify({ token: currentToken })
                                    })
                                    .then(res => res.json())
                                    .then(data => console.log('Token saved:', data))
                                    .catch(err => console.error('Save token error:', err));
                                }
                            }).catch((err) => {
                                console.error('Token error:', err);
                            });
                        });
                    }
                });


            }).catch((err) => {
                console.error('Service Worker registration failed:', err);
            });
        }
        </script>
    @RenderSection("Scripts", required: false)
</body>
</html>
